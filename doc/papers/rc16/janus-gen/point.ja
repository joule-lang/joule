/*
Copyright (c) 2017, Ulrik Pagh Schultz, University of Southern Denmark
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met: 

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer. 
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution. 

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies, 
either expressed or implied, of the University of Southern Denmark.
*/

// Generated program point
// Memory characteristics: max object size = 3, max stack depth = 10
procedure dispatch_add_to_y(int heap[][],int heap_counter,int this,int var_y)
  if heap[this][0]=1 then
    call Point_add_to_y(heap,heap_counter,this,var_y)
  else
    error("Method not found")
  fi heap[this][0]=1
procedure dispatch_example1(int heap[][],int heap_counter,int this)
  if heap[this][0]=2 then
    call Main_example1(heap,heap_counter,this)
  else
    error("Method not found")
  fi heap[this][0]=2
procedure dispatch_add_to_x(int heap[][],int heap_counter,int this,int var_x)
  if heap[this][0]=1 then
    call Point_add_to_x(heap,heap_counter,this,var_x)
  else
    error("Method not found")
  fi heap[this][0]=1
procedure dispatch_example2(int heap[][],int heap_counter,int this)
  if heap[this][0]=2 then
    call Main_example2(heap,heap_counter,this)
  else
    error("Method not found")
  fi heap[this][0]=2
procedure constructor_Point(int heap[][],int heap_counter,int this,int var_x,int var_y)
  heap[this][0] += 1
  heap[this][1] += var_x
  heap[this][2] += var_y
procedure Point_add_to_x(int heap[][],int heap_counter,int this,int var_x)
  heap[this][1] += var_x
procedure Point_add_to_y(int heap[][],int heap_counter,int this,int var_y)
  heap[this][2] += var_y
procedure constructor_Main(int heap[][],int heap_counter,int this)
  heap[this][0] += 2
procedure Main_example1(int heap[][],int heap_counter,int this)
  local int var_p = 0
  var_p += heap_counter
  call constructor_Point(heap,heap_counter,heap_counter,5,8)
  heap_counter += 1 // object pseudo allocation
  call dispatch_add_to_x(heap,heap_counter,var_p,2)
  uncall dispatch_add_to_y(heap,heap_counter,var_p,3)
  uncall constructor_Point(heap,heap_counter,var_p,7,5)
  heap_counter -= 1
  delocal int var_p = heap_counter
procedure Main_example2(int heap[][],int heap_counter,int this)
  local int var_p = 0
  local int var_q = 0
  var_p += heap_counter
  call constructor_Point(heap,heap_counter,heap_counter,1,7)
  heap_counter += 1 // object pseudo allocation
  var_q += var_p
  call dispatch_add_to_x(heap,heap_counter,var_q,2)
  delocal int var_q = var_p
  uncall constructor_Point(heap,heap_counter,var_p,3,7)
  heap_counter -= 1
  delocal int var_p = heap_counter
procedure main()
  int heap[10][3]
  int heap_counter = 1 // 0 represents a null value
  int var_m = 0
  var_m += heap_counter
  call constructor_Main(heap,heap_counter,heap_counter)
  heap_counter += 1 // object pseudo allocation
  call dispatch_example1(heap,heap_counter,var_m)
  call dispatch_example2(heap,heap_counter,var_m)
  uncall constructor_Main(heap,heap_counter,var_m)
  heap_counter -= 1
  var_m -= heap_counter
