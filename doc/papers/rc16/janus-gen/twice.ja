/*
Copyright (c) 2017, Ulrik Pagh Schultz, University of Southern Denmark
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met: 

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer. 
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution. 

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies, 
either expressed or implied, of the University of Southern Denmark.
*/

// Generated program twice
// Memory characteristics: max object size = 2, max stack depth = 10
procedure dispatch_apply(int heap[][],int heap_counter,int this,int var_var,int var_value)
  if heap[this][0]=3 then
    call Sub_apply(heap,heap_counter,this,var_var,var_value)
  else
    if heap[this][0]=2 then
      call Add_apply(heap,heap_counter,this,var_var,var_value)
    else
      if heap[this][0]=1 then
        call Operator_apply(heap,heap_counter,this,var_var,var_value)
      else
        if heap[this][0]=4 then
          call Twice_apply(heap,heap_counter,this,var_var,var_value)
        else
          error("Method not found")
        fi heap[this][0]=4
      fi heap[this][0]=1
    fi heap[this][0]=2
  fi heap[this][0]=3
procedure constructor_Operator(int heap[][],int heap_counter,int this)
  heap[this][0] += 1
procedure constructor_Add(int heap[][],int heap_counter,int this)
  heap[this][0] += 2
procedure Add_apply(int heap[][],int heap_counter,int this,int var_var,int var_value)
  var_var += var_value
procedure constructor_Sub(int heap[][],int heap_counter,int this)
  heap[this][0] += 3
procedure Sub_apply(int heap[][],int heap_counter,int this,int var_var,int var_value)
  var_var -= var_value
procedure constructor_Twice(int heap[][],int heap_counter,int this,int var_op)
  heap[this][0] += 4
  heap[this][1] += var_op
procedure Twice_apply(int heap[][],int heap_counter,int this,int var_var,int var_value)
  local int var_op = heap[this][1]
  call dispatch_apply(heap,heap_counter,var_op,var_var,var_value)
  call dispatch_apply(heap,heap_counter,var_op,var_var,var_value)
  delocal int var_op = heap[this][1]
procedure main()
  int heap[10][2]
  int heap_counter = 1 // 0 represents a null value
  int var_a = 0
  int var_b = 0
  int var_aa = 0
  int var_bb = 0
  int var_x = 0
  var_a += heap_counter
  call constructor_Add(heap,heap_counter,heap_counter)
  heap_counter += 1 // object pseudo allocation
  var_b += heap_counter
  call constructor_Sub(heap,heap_counter,heap_counter)
  heap_counter += 1 // object pseudo allocation
  var_aa += heap_counter
  call constructor_Twice(heap,heap_counter,heap_counter,var_a)
  heap_counter += 1 // object pseudo allocation
  var_bb += heap_counter
  call constructor_Twice(heap,heap_counter,heap_counter,var_b)
  heap_counter += 1 // object pseudo allocation
  call dispatch_apply(heap,heap_counter,var_aa,var_x,4)
  uncall dispatch_apply(heap,heap_counter,var_bb,var_x,1)
  var_x-=10
  uncall constructor_Twice(heap,heap_counter,var_bb,var_b)
  heap_counter -= 1
  var_bb -= heap_counter
  uncall constructor_Twice(heap,heap_counter,var_aa,var_a)
  heap_counter -= 1
  var_aa -= heap_counter
  uncall constructor_Sub(heap,heap_counter,var_b)
  heap_counter -= 1
  var_b -= heap_counter
  uncall constructor_Add(heap,heap_counter,var_a)
  heap_counter -= 1
  var_a -= heap_counter
